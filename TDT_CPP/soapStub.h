/* soapStub.h
   Generated by gSOAP 2.8.1 from EpcTagDataTranslation.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_tdt	"urn:epcglobal:tdt:xsd:1"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_tdt__LevelTypeList
#define SOAP_TYPE_tdt__LevelTypeList (16)
/* tdt:LevelTypeList */
enum tdt__LevelTypeList {tdt__LevelTypeList__BINARY = 0, tdt__LevelTypeList__TAG_USCOREENCODING = 1, tdt__LevelTypeList__PURE_USCOREIDENTITY = 2, tdt__LevelTypeList__LEGACY = 3, tdt__LevelTypeList__LEGACY_USCOREALT = 4, tdt__LevelTypeList__LEGACY_USCOREAI = 5, tdt__LevelTypeList__ONS_USCOREHOSTNAME = 6};
#endif

#ifndef SOAP_TYPE_tdt__InputFormatList
#define SOAP_TYPE_tdt__InputFormatList (17)
/* tdt:InputFormatList */
enum tdt__InputFormatList {tdt__InputFormatList__BINARY = 0, tdt__InputFormatList__STRING = 1};
#endif

#ifndef SOAP_TYPE_tdt__ModeList
#define SOAP_TYPE_tdt__ModeList (18)
/* tdt:ModeList */
enum tdt__ModeList {tdt__ModeList__EXTRACT = 0, tdt__ModeList__FORMAT = 1};
#endif

#ifndef SOAP_TYPE_tdt__CompactionMethodList
#define SOAP_TYPE_tdt__CompactionMethodList (19)
/* tdt:CompactionMethodList */
enum tdt__CompactionMethodList {tdt__CompactionMethodList__32_bit = 0, tdt__CompactionMethodList__16_bit = 1, tdt__CompactionMethodList__8_bit = 2, tdt__CompactionMethodList__7_bit = 3, tdt__CompactionMethodList__6_bit = 4, tdt__CompactionMethodList__5_bit = 5};
#endif

#ifndef SOAP_TYPE_tdt__PadDirectionList
#define SOAP_TYPE_tdt__PadDirectionList (20)
/* tdt:PadDirectionList */
enum tdt__PadDirectionList {tdt__PadDirectionList__LEFT = 0, tdt__PadDirectionList__RIGHT = 1};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_tdt__Field
#define SOAP_TYPE_tdt__Field (10)
/* tdt:Field */
class SOAP_CMAC tdt__Field
{
public:
	std::string seq;	/* required attribute */
	std::string name;	/* required attribute */
	std::string *bitLength;	/* optional attribute */
	std::string characterSet;	/* required attribute */
	enum tdt__CompactionMethodList *compaction;	/* optional attribute */
	std::string *compression;	/* optional attribute */
	std::string *padChar;	/* optional attribute */
	enum tdt__PadDirectionList *padDir;	/* optional attribute */
	enum tdt__PadDirectionList *bitPadDir;	/* optional attribute */
	std::string *decimalMinimum;	/* optional attribute */
	std::string *decimalMaximum;	/* optional attribute */
	std::string *length;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_tdt__Field */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tdt__Field(): bitLength(NULL), compaction(NULL), compression(NULL), padChar(NULL), padDir(NULL), bitPadDir(NULL), decimalMinimum(NULL), decimalMaximum(NULL), length(NULL), soap(NULL) { tdt__Field::soap_default(NULL); }
	virtual ~tdt__Field() { }
};
#endif

#ifndef SOAP_TYPE_tdt__Option
#define SOAP_TYPE_tdt__Option (11)
/* tdt:Option */
class SOAP_CMAC tdt__Option
{
public:
	std::vector<tdt__Field * >field;	/* required element of type tdt:Field */
	std::string optionKey;	/* required attribute */
	std::string *pattern;	/* optional attribute */
	std::string grammar;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_tdt__Option */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tdt__Option(): pattern(NULL), soap(NULL) { tdt__Option::soap_default(NULL); }
	virtual ~tdt__Option() { }
};
#endif

#ifndef SOAP_TYPE_tdt__Rule
#define SOAP_TYPE_tdt__Rule (12)
/* tdt:Rule */
class SOAP_CMAC tdt__Rule
{
public:
	enum tdt__ModeList type;	/* required attribute */
	enum tdt__InputFormatList inputFormat;	/* required attribute */
	std::string seq;	/* required attribute */
	std::string newFieldName;	/* required attribute */
	std::string characterSet;	/* required attribute */
	std::string *padChar;	/* optional attribute */
	enum tdt__PadDirectionList *padDir;	/* optional attribute */
	enum tdt__PadDirectionList *bitPadDir;	/* optional attribute */
	std::string *decimalMinimum;	/* optional attribute */
	std::string *decimalMaximum;	/* optional attribute */
	std::string *length;	/* optional attribute */
	std::string function;	/* required attribute */
	std::string *tableURL;	/* optional attribute */
	std::string *tableParams;	/* optional attribute */
	std::string *tableXPath;	/* optional attribute */
	std::string *tableSQL;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_tdt__Rule */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tdt__Rule(): padChar(NULL), padDir(NULL), bitPadDir(NULL), decimalMinimum(NULL), decimalMaximum(NULL), length(NULL), tableURL(NULL), tableParams(NULL), tableXPath(NULL), tableSQL(NULL), soap(NULL) { tdt__Rule::soap_default(NULL); }
	virtual ~tdt__Rule() { }
};
#endif

#ifndef SOAP_TYPE_tdt__Level
#define SOAP_TYPE_tdt__Level (13)
/* tdt:Level */
class SOAP_CMAC tdt__Level
{
public:
	std::vector<tdt__Option * >option;	/* required element of type tdt:Option */
	std::vector<tdt__Rule * >rule;	/* optional element of type tdt:Rule */
	enum tdt__LevelTypeList type;	/* required attribute */
	std::string *prefixMatch;	/* optional attribute */
	std::string *requiredParsingParameters;	/* optional attribute */
	std::string *requiredFormattingParameters;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_tdt__Level */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tdt__Level(): prefixMatch(NULL), requiredParsingParameters(NULL), requiredFormattingParameters(NULL), soap(NULL) { tdt__Level::soap_default(NULL); }
	virtual ~tdt__Level() { }
};
#endif

#ifndef SOAP_TYPE_tdt__Scheme
#define SOAP_TYPE_tdt__Scheme (14)
/* tdt:Scheme */
class SOAP_CMAC tdt__Scheme
{
public:
	std::vector<tdt__Level * >level;	/* required element of type tdt:Level */
	std::string name;	/* required attribute */
	std::string optionKey;	/* required attribute */
	std::string tagLength;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_tdt__Scheme */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tdt__Scheme(): soap(NULL) { tdt__Scheme::soap_default(NULL); }
	virtual ~tdt__Scheme() { }
};
#endif

#ifndef SOAP_TYPE_tdt__EpcTagDataTranslation
#define SOAP_TYPE_tdt__EpcTagDataTranslation (15)
/* tdt:EpcTagDataTranslation */
class SOAP_CMAC tdt__EpcTagDataTranslation
{
public:
	std::vector<tdt__Scheme * >scheme;	/* required element of type tdt:Scheme */
	std::string version;	/* required attribute */
	time_t date;	/* required attribute */
	std::string epcTDSVersion;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_tdt__EpcTagDataTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tdt__EpcTagDataTranslation(): soap(NULL) { tdt__EpcTagDataTranslation::soap_default(NULL); }
	virtual ~tdt__EpcTagDataTranslation() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (37)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (38)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (40)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (43)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (44)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (9)
typedef std::string xsd__integer;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
