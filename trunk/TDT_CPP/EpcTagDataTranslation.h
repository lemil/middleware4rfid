/* EpcTagDataTranslation.h
   Generated by wsdl2h 2.8.1 from EpcTagDataTranslation.xsd and typemap.dat
   2011-07-07 03:14:41 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on EpcTagDataTranslation.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   urn:epcglobal:tdt:xsd:1                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tdt = "urn:epcglobal:tdt:xsd:1"

*/

/// @brief <epcglobal:copyright>Copyright 2004-2005 Epcglobal Inc., All Rights Reserved.</epcglobal:copyright> <epcglobal:disclaimer>EPCglobal Inc., its members, officers, directors, employees, or agents shall not be liable for any injury, loss, damages, financial or otherwise, arising from, related to, or caused by the use of this document. The use of said document shall constitute your express consent to the foregoing exculpation.</epcglobal:disclaimer> <epcglobal:specification>Tag Data Translation (TDT) version 1.4</epcglobal:specification>
#define SOAP_NAMESPACE_OF_tdt	"urn:epcglobal:tdt:xsd:1"
//gsoap tdt   schema namespace:	urn:epcglobal:tdt:xsd:1
//gsoap tdt   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:integer"
typedef std::string xsd__integer;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class tdt__Field.
class tdt__Field;

//  Forward declaration of class tdt__Option.
class tdt__Option;

//  Forward declaration of class tdt__Rule.
class tdt__Rule;

//  Forward declaration of class tdt__Level.
class tdt__Level;

//  Forward declaration of class tdt__Scheme.
class tdt__Scheme;

//  Forward declaration of class tdt__EpcTagDataTranslation.
class tdt__EpcTagDataTranslation;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:epcglobal:tdt:xsd:1                                                  *
 *                                                                            *
\******************************************************************************/


/// "urn:epcglobal:tdt:xsd:1":LevelTypeList is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'tdt__LevelTypeList' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tdt__LevelTypeList
{
	tdt__LevelTypeList__BINARY,	///< xs:string value="BINARY"
	tdt__LevelTypeList__TAG_USCOREENCODING,	///< xs:string value="TAG_ENCODING"
	tdt__LevelTypeList__PURE_USCOREIDENTITY,	///< xs:string value="PURE_IDENTITY"
	tdt__LevelTypeList__LEGACY,	///< xs:string value="LEGACY"
	tdt__LevelTypeList__LEGACY_USCOREALT,	///< xs:string value="LEGACY_ALT"
	tdt__LevelTypeList__LEGACY_USCOREAI,	///< xs:string value="LEGACY_AI"
	tdt__LevelTypeList__ONS_USCOREHOSTNAME,	///< xs:string value="ONS_HOSTNAME"
};

/// "urn:epcglobal:tdt:xsd:1":InputFormatList is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'tdt__InputFormatList' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tdt__InputFormatList
{
	tdt__InputFormatList__BINARY,	///< xs:string value="BINARY"
	tdt__InputFormatList__STRING,	///< xs:string value="STRING"
};

/// "urn:epcglobal:tdt:xsd:1":ModeList is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'tdt__ModeList' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tdt__ModeList
{
	tdt__ModeList__EXTRACT,	///< xs:string value="EXTRACT"
	tdt__ModeList__FORMAT,	///< xs:string value="FORMAT"
};

/// "urn:epcglobal:tdt:xsd:1":CompactionMethodList is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'tdt__CompactionMethodList' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tdt__CompactionMethodList
{
	tdt__CompactionMethodList__32_bit,	///< xs:string value="32-bit"
	tdt__CompactionMethodList__16_bit,	///< xs:string value="16-bit"
	tdt__CompactionMethodList__8_bit,	///< xs:string value="8-bit"
	tdt__CompactionMethodList__7_bit,	///< xs:string value="7-bit"
	tdt__CompactionMethodList__6_bit,	///< xs:string value="6-bit"
	tdt__CompactionMethodList__5_bit,	///< xs:string value="5-bit"
};

/// "urn:epcglobal:tdt:xsd:1":PadDirectionList is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'tdt__PadDirectionList' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum tdt__PadDirectionList
{
	tdt__PadDirectionList__LEFT,	///< xs:string value="LEFT"
	tdt__PadDirectionList__RIGHT,	///< xs:string value="RIGHT"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:epcglobal:tdt:xsd:1                                                  *
 *                                                                            *
\******************************************************************************/


/// "urn:epcglobal:tdt:xsd:1":Field is a complexType.
class tdt__Field
{ public:
/// Attribute seq of type xs:integer.
   @xsd__integer                         seq                            1;	///< Required attribute.
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute bitLength of type xs:integer.
   @xsd__integer*                        bitLength                      0;	///< Optional attribute.
/// Attribute characterSet of type xs:string.
   @std::string                          characterSet                   1;	///< Required attribute.
/// Attribute compaction of type "urn:epcglobal:tdt:xsd:1":CompactionMethodList.
   @enum tdt__CompactionMethodList*      compaction                     0;	///< Optional attribute.
/// Attribute compression of type xs:string.
   @std::string*                         compression                    0;	///< Optional attribute.
/// Attribute padChar of type xs:string.
   @std::string*                         padChar                        0;	///< Optional attribute.
/// Attribute padDir of type "urn:epcglobal:tdt:xsd:1":PadDirectionList.
   @enum tdt__PadDirectionList*          padDir                         0;	///< Optional attribute.
/// Attribute bitPadDir of type "urn:epcglobal:tdt:xsd:1":PadDirectionList.
   @enum tdt__PadDirectionList*          bitPadDir                      0;	///< Optional attribute.
/// Attribute decimalMinimum of type xs:string.
   @std::string*                         decimalMinimum                 0;	///< Optional attribute.
/// Attribute decimalMaximum of type xs:string.
   @std::string*                         decimalMaximum                 0;	///< Optional attribute.
/// Attribute length of type xs:integer.
   @xsd__integer*                        length                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:epcglobal:tdt:xsd:1":Option is a complexType.
class tdt__Option
{ public:
/// Vector of tdt__Field* with length 1..unbounded
    std::vector<tdt__Field*            > field                          1;
/// Attribute optionKey of type xs:string.
   @std::string                          optionKey                      1;	///< Required attribute.
/// Attribute pattern of type xs:string.
   @std::string*                         pattern                        0;	///< Optional attribute.
/// Attribute grammar of type xs:string.
   @std::string                          grammar                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:epcglobal:tdt:xsd:1":Rule is a complexType.
class tdt__Rule
{ public:
/// Attribute type of type "urn:epcglobal:tdt:xsd:1":ModeList.
   @enum tdt__ModeList                   type                           1;	///< Required attribute.
/// Attribute inputFormat of type "urn:epcglobal:tdt:xsd:1":InputFormatList.
   @enum tdt__InputFormatList            inputFormat                    1;	///< Required attribute.
/// Attribute seq of type xs:integer.
   @xsd__integer                         seq                            1;	///< Required attribute.
/// Attribute newFieldName of type xs:string.
   @std::string                          newFieldName                   1;	///< Required attribute.
/// Attribute characterSet of type xs:string.
   @std::string                          characterSet                   1;	///< Required attribute.
/// Attribute padChar of type xs:string.
   @std::string*                         padChar                        0;	///< Optional attribute.
/// Attribute padDir of type "urn:epcglobal:tdt:xsd:1":PadDirectionList.
   @enum tdt__PadDirectionList*          padDir                         0;	///< Optional attribute.
/// Attribute bitPadDir of type "urn:epcglobal:tdt:xsd:1":PadDirectionList.
   @enum tdt__PadDirectionList*          bitPadDir                      0;	///< Optional attribute.
/// Attribute decimalMinimum of type xs:string.
   @std::string*                         decimalMinimum                 0;	///< Optional attribute.
/// Attribute decimalMaximum of type xs:string.
   @std::string*                         decimalMaximum                 0;	///< Optional attribute.
/// Attribute length of type xs:string.
   @std::string*                         length                         0;	///< Optional attribute.
/// Attribute function of type xs:string.
   @std::string                          function                       1;	///< Required attribute.
/// Attribute tableURL of type xs:string.
   @std::string*                         tableURL                       0;	///< Optional attribute.
/// Attribute tableParams of type xs:string.
   @std::string*                         tableParams                    0;	///< Optional attribute.
/// Attribute tableXPath of type xs:string.
   @std::string*                         tableXPath                     0;	///< Optional attribute.
/// Attribute tableSQL of type xs:string.
   @std::string*                         tableSQL                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:epcglobal:tdt:xsd:1":Level is a complexType.
class tdt__Level
{ public:
/// Vector of tdt__Option* with length 1..unbounded
    std::vector<tdt__Option*           > option                         1;
/// Vector of tdt__Rule* with length 0..unbounded
    std::vector<tdt__Rule*             > rule                           0;
/// Attribute type of type "urn:epcglobal:tdt:xsd:1":LevelTypeList.
   @enum tdt__LevelTypeList              type                           1;	///< Required attribute.
/// Attribute prefixMatch of type xs:string.
   @std::string*                         prefixMatch                    0;	///< Optional attribute.
/// Attribute requiredParsingParameters of type xs:string.
   @std::string*                         requiredParsingParameters      0;	///< Optional attribute.
/// Attribute requiredFormattingParameters of type xs:string.
   @std::string*                         requiredFormattingParameters   0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:epcglobal:tdt:xsd:1":Scheme is a complexType.
class tdt__Scheme
{ public:
/// Vector of tdt__Level* with length 1..unbounded
    std::vector<tdt__Level*            > level                          1;
/// Attribute name of type xs:string.
   @std::string                          name                           1;	///< Required attribute.
/// Attribute optionKey of type xs:string.
   @std::string                          optionKey                      1;	///< Required attribute.
/// Attribute tagLength of type xs:integer.
   @xsd__integer                         tagLength                      1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "urn:epcglobal:tdt:xsd:1":EpcTagDataTranslation is a complexType.
class tdt__EpcTagDataTranslation
{ public:
/// Vector of tdt__Scheme* with length 1..unbounded
    std::vector<tdt__Scheme*           > scheme                         1;
/// Attribute version of type xs:string.
   @std::string                          version                        1;	///< Required attribute.
/// Attribute date of type xs:dateTime.
   @time_t                               date                           1;	///< Required attribute.
/// Attribute epcTDSVersion of type xs:string.
   @std::string                          epcTDSVersion                  1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:epcglobal:tdt:xsd:1                                                  *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "urn:epcglobal:tdt:xsd:1":epcTagDataTranslation of type "urn:epcglobal:tdt:xsd:1":EpcTagDataTranslation.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:epcglobal:tdt:xsd:1                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section tdt Top-level root elements of schema "urn:epcglobal:tdt:xsd:1"

  - <tdt:epcTagDataTranslation> (use wsdl2h option -g to auto-generate)

*/

/* End of EpcTagDataTranslation.h */
